def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

// // Create a variable called keystorePropertiesFile, and initialize it to your
// // keystore.properties file, in the rootProject folder.
// def keystorePropertiesFile = rootProject.file("keystore.properties")

// // Initialize a new Properties() object called keystoreProperties.
// def keystoreProperties = new Properties()

// // Load your keystore.properties file into the keystoreProperties object.
// keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 26
    defaultConfig {
        if (buildAsApplication) {
            applicationId "org.libshadeslider.app"
        }
        minSdkVersion 18
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        setProperty("archivesBaseName", "ShadeSlider-$versionName")
        externalNativeBuild {
            ndkBuild {
                arguments "APP_PLATFORM=android-18"
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
        }
    }
    // signingConfigs {
    //     release {
    //         // You need to specify either an absolute path or include the
    //         // keystore file in the same directory as the build.gradle file.
    //         keyAlias keystoreProperties['keyAlias']
    //         keyPassword keystoreProperties['keyPassword']
    //         storeFile file(keystoreProperties['storeFile'])
    //         storePassword keystoreProperties['storePassword']
    //     }
    // }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // signingConfig signingConfigs.release
        }
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
            ndkBuild {
                path 'jni/Android.mk'
            }
        }
       
    }
    lintOptions {
        abortOnError false
    }
    
    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "org.libshadeslider.app.aar";
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}
